[DoorPi]
# This will be used to derive default paths via the !BASEPATH! macro
#base_path = ($HOME of user DoorPi is running as)
# The event log stores information about all events that occured in DoorPi
#eventlog = !BASEPATH!/conf/eventlog.db
# The output pin alias set here will be toggled on/off every second
#is_alive_led =

# How many snapshots to keep, older snapshots will be deleted
#number_of_snapshots = 10
#snapshot_path = !BASEPATH!/../DoorPiWeb/snapshots
#snapshot_size = 1280x720

[SIP-Phone]
# SIP phone type (dummy, pjsua2)
#sipphonetyp = dummy
# Will be played back (looping) while dialing
#dialtone = !BASEPATH!/doorpi/media/ShortDialTone.wav

# The path where recordings will be stored. If unset / empty, calls will not be recorded.
#records =
# If False, recordings will start after the call was picked up
#record_while_dialing = False

# SIP server and login data
#sipserver_server =
#sipserver_username =
#sipserver_password = (if unset: same as username)
#sipserver_realm = (if unset: same as server)
# Will be shown on callee's device, if supported
#identity = DoorPi
# The local SIP port
#local_port = 5060
# STUN server to use for NAT traversal, usually not needed
#stun_server =

# The capture and playback devices to use.
#capture_device = ALSA: default
#playback_device = ALSA: default
# Allowed audio codecs. Anything other than PCMA,PCMU is not recommended due to CPU constraints.
#audio_codecs = PCMA,PCMU
# Software echo cancellation can use significant resources, and is disabled by default.
#echo_cancellation_enabled = False

# True to send a video stream along
#video_display_enabled = False
# The video device, in the form V4L2: <path>
#video_device =
# Resolution of the video stream (1080p, uxga, sxga, 720p, xga, svga, 4cif, vga, cif, qvga, qcif)
#video_size =
#video_codecs = vp8

# Give up if nobody answered the call within <...> seconds
#call_timeout = 15
# Hang up if the call is going for <...> seconds; 0 to disable
#max_call_time = 120
# Maximum number of simultaneous calls, if supported by the library
#ua.max_calls = 2

[AdminNumbers]
# Admin numbers may call DoorPi at any time (unless another call is active)
# and listen to its microphone's input or trigger DTMF actions (see below).
# Normal SIP phone events (MakeCall etc.) will NOT be triggered.
# This section contains definitions in the form of
#   <number> = <active>
# <number> is a telephone number or SIP address
# <active> is the literal text "active" (without quotes)

[keyboards]
# This sections contains definitions in the form of
#   <kb_alias> = <type>
# where <kb_alias> is an arbitrary name and <type> is one of:
# - gpio (RaspberryPi onboard header, requires `RPi.GPIO` python module)
# - piface (PiFace IO expander, requires `piface` python module)
# - filesystem (pseudo-keyboard using files, requires `watchdog` python module)
# - rdm6300 (RDM6300 RFID transceiver, requires `serial` python module)

#[<kb_alias>_keyboard]
# This sections configures the keyboard named <kb_alias>, with possible options
# depending on the keyboard type selected in [keyboards].
### gpio-specific options ###
# debounce time (ms)
#bouncetime = 2000
# 0: VCC == on, 1: VCC == off
#polarity = 0
# fire OnKeyPressed with OnKeyDown instead of OnKeyUp
#pressed_on_keydown = True
# GPIO address mode (BOARD / BCM)
#mode = BOARD
# configure pull-up / pull-down resistor (PUD_OFF / PUD_DOWN / PUD_UP)
#pull_up_down = PUD_OFF

### piface-specific options ###
# debounce time (ms)
#bouncetime = 2000
# 0: VCC == on, 1: VCC == off
#polarity = 0
# fire OnKeyPressed with OnKeyDown instead of OnKeyUp
#pressed_on_keydown = True

### filesystem-specific options ###
# reset files back to 0 after reading
#reset_input = True
# directory for input files
#base_path_input =
# directory for output files
#base_path_output =
# fire OnKeyPressed with OnKeyDown instead of OnKeyUp
#pressed_on_keydown = True

### rdm6300-specific options ###
# serial port's device file
#port = /dev/ttyAMA0
#baudrate = 9600
#dismisstime = 5

#[<kb_alias>_InputPins]
# This section contains definitions in the form of
#   <pin> = <action>
# <pin> will be configured as input, if necessary
# for more information about <action>s, see [EVENT_...] below

#[<kb_alias>_OutputPins]
# This section contains definitions in the form of
#   <pin> = <pin_alias>
# where <pin_alias> is an arbitrary name for use in actions

[DTMF]
# This sections contains definitions in the form of
#   <seq> = <action>
# where <seq> is a sequence of DTMF tones (keys on your phone's keypad)
# for more information about <action>s, see [EVENT_...] below

#[EVENT_<eventname>]
# Instead of defining single actions inline in [<kb_alias>_InputPins] or [DTMF], you can
# use these event blocks to fire multiple actions in order.
# Each event block contains definitions in the form of
#   <order> = <action>
# <order> is an arbitrary key used to order the actions, two numeric digits recommended
# <action> is an action definition of the form
#   <type>:<parameters>
# with <parameters> being a comma separated list of parameters, and <action> one of:
# - call:<address>
#       Call the specified SIP address (ex: 'call:**613#614')
# - out:<pin_alias>,<value>[,<stop_value>,<hold_time>[,<interrupt>]]
#       set output pin <pin_alias> to <value>
#       after <hold_time> seconds elapse, set it to <stop_value>
#       if input pin <interrupt> is triggered, cancel the timer
# - os_execute:<command>
#       execute <command> with /bin/sh
# - mailto:<receiver>,<subject>,<message>,<snapshot>
#       send a mail to <receiver>, with subject <subject> and message body <message>
#       if <snapshot> is True, attach the latest snapshot
# - sleep:<time>
#       wait <time> seconds before continuing
# - hangup:<time>
#       wait <time> seconds, then hang up the active SIP call
# - file_call_value:<file>
#       call the SIP address specified in <file>
# - log:<message>
#       print <message> into the log file
# - take_snapshot:
#       take a snapshot
# An example event definition might look like this:
#[EVENT_OnKeyDown_<kb_alias>_7]
## switch on lights
#20 = out:lights,1
## take a snapshot of the person outside
## the snapshot may be displayed on a wall-mounted tablet inside the house,
## or be sent via mail if nobody answered the call in [EVENT_OnSipPhoneCallTimeoutNoResponse]
#40 = take_snapshot:
## initiate the SIP call
#60 = call:**612#613

[SMTP]
#server =
#port =
#need_login = False
#username =
#password =
# Set to True to use STARTTLS transport encryption (recommended)
#use_tls = False
#from =

[DoorPiWeb]
# Bind to this IP address and port
# Note: this is ignored if using systemd, see systemd.socket(5)
#       use `systemctl edit --full doorpi.socket` to configure
#ip = 0.0.0.0
#port = 50317

#indexfile = index.html
#www = !BASEPATH!/../DoorPiWeb

# permission control
public = AREA_public

# the "public" area will never ask for a password
[AREA_public]
.*
# Note: To enable password protection, remove the previous line and uncomment
#       the rest of this file, up to and including [ReadPermission]. Also make
#       sure to set passwords for your users.
#/dashboard/bower_components/.*
#/dashboard/dist/.*
#/dashboard/js/.*
#/dashboard/less/.*
#/login.html
#/favicon.ico
#
## other areas for fine-grained permission control
#[AREA_config]
#/control/config_value_get
#/control/config_value_set
#/control/config_value_delete
#/control/config_save
#/control/config_get_configfile
#
#[AREA_dashboard]
#/dashboard/pages/.*html
#
#[AREA_status]
#/status
#/mirror
#
#[User]
## This section contains definitions in the form of
##   <username> = <password>
## without this, access to DoorPiWeb will not be possible
##admin = <admin's password>
##someone_else = <someone_else's password>
#
#[Group]
## This section contains definitions in the form of
##   <groupname> = <users>
## where <users> is a comma separated list of usernames
#admins = admin
#guests = someone_else
#
#[WritePermission]
## This section contains definitions in the form of
##   <groupname> = <areas>
## where <areas> is a comma separated list of area names (see [AREA_<areaname>] above)
## If [WritePermission] is granted, [ReadPermission] is granted automatically.
#admins = dashboard,status,config
#
#[ReadPermission]
## see [WritePermission]
#guests = dashboard
